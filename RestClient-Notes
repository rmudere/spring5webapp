public class RestClient {
    private static final Logger log = LoggerFactory.getLogger(RestClient.class);
    private final SystemAuditingService auditingService;
    private final RestTemplate restTemplate;
    protected String systemId;

    protected RestClient(RestTemplate restTemplate, SystemAuditingService auditingService, String systemId) {
        this.auditingService = auditingService;
        this.restTemplate = restTemplate;
        this.systemId = systemId;
    }

    protected <T> T getForObject(String serviceHost, String apiPath, MultiValueMap<String, String> queryParameters, AssistedHttpEntity httpEntity, Class<T> responseType, Function<T, ResponseError> checkResponseError) throws RestClientException {
        URI url = this.prepareUri(serviceHost, apiPath, queryParameters);

        try {
            this.logRequest(url, HttpMethod.GET, httpEntity, responseType);
            ResponseEntity<T> responseEntity = this.restTemplate.exchange(url, HttpMethod.GET, httpEntity, responseType);
            this.validateAndAuditResponse(url, httpEntity, responseEntity.getBody(), checkResponseError);
            return responseEntity.getBody();
        } catch (HttpStatusCodeException var9) {
            this.handleStatusCodeException(url, httpEntity, var9.getResponseBodyAsString(), var9);
            throw var9;
        } catch (RestClientException var10) {
            this.handleRestClientException(url, httpEntity, var10);
            throw var10;
        }
    }

    protected <T> T postForObject(String serviceHost, String apiPath, MultiValueMap<String, String> queryParameters, AssistedHttpEntity httpEntity, Class<T> responseType, Function<T, ResponseError> checkResponseError) throws RestClientException {
        URI url = this.prepareUri(serviceHost, apiPath, queryParameters);

        try {
            this.logRequest(url, HttpMethod.POST, httpEntity, responseType);
            ResponseEntity<T> responseEntity = this.restTemplate.exchange(url, HttpMethod.POST, httpEntity, responseType);
            this.validateAndAuditResponse(url, httpEntity, responseEntity.getBody(), checkResponseError);
            return responseEntity.getBody();
        } catch (HttpStatusCodeException var9) {
            this.handleStatusCodeException(url, httpEntity, var9.getResponseBodyAsString(), var9);
            throw var9;
        } catch (RestClientException var10) {
            this.handleRestClientException(url, httpEntity, var10);
            throw var10;
        }
    }

    private AuditContext buildAuditContext(URI url, AssistedHttpEntity requestEntity, String requestPayload, String responsePayload, ResponseError error) {
        return error.isError() ? AuditContext.createAuditError(requestEntity.getRequestMetaData().getUcn(), requestEntity.getRequestMetaData().getEmployeeId(), requestEntity.getRequestMetaData().getSessionId(), requestEntity.getRequestMetaData().getRequestId(), url.toString(), this.systemId, requestPayload, responsePayload, error.getErrorMessage()) : AuditContext.createAuditSuccess(requestEntity.getRequestMetaData().getUcn(), requestEntity.getRequestMetaData().getEmployeeId(), requestEntity.getRequestMetaData().getSessionId(), requestEntity.getRequestMetaData().getRequestId(), url.toString(), this.systemId, requestPayload, responsePayload);
    }

    protected URI prepareUri(String serviceHost, String apiPath, MultiValueMap<String, String> requestParams) {
        return UriComponentsBuilder.fromUriString(serviceHost).path(apiPath).queryParams(requestParams).build().encode().toUri();
    }

    private <T> void validateAndAuditResponse(URI url, AssistedHttpEntity requestEntity, T response, Function<T, ResponseError> checkResponseError) {
        ResponseError error = (ResponseError)checkResponseError.apply(response);
        String requestPayload = this.transFormPayLoad(requestEntity.getBody());
        String responsePayload = this.transFormPayLoad(response);
        this.auditingService.submitAudit(this.buildAuditContext(url, requestEntity, requestPayload, responsePayload, error));
    }

    private void validateAndAuditResponse(URI url, AssistedHttpEntity requestEntity, String responseBody, ResponseError error) {
        String requestPayload = this.transFormPayLoad(requestEntity.getBody());
        this.auditingService.submitAudit(this.buildAuditContext(url, requestEntity, requestPayload, responseBody, error));
    }

    private void validateAndAuditResponse(URI url, AssistedHttpEntity requestEntity, ResponseError error) {
        String requestPayload = this.transFormPayLoad(requestEntity.getBody());
        this.auditingService.submitAudit(this.buildAuditContext(url, requestEntity, requestPayload, "", error));
    }

    private <T> String transFormPayLoad(T body) {
        String payload;
        try {
            payload = DataTransformerUtil.toJson(body);
        } catch (DataSerializationException var4) {
            payload = null != body ? body.toString() : "";
        }

        return payload;
    }

    private void handleStatusCodeException(URI url, AssistedHttpEntity entity, @Nullable String responseBody, HttpStatusCodeException e) {
        log.error("Failed to GET object from {}", url.toString());
        ResponseError error = new ResponseError(true, e.getMessage());
        if (StringUtils.isBlank(responseBody)) {
            this.validateAndAuditResponse(url, entity, error);
        } else {
            this.validateAndAuditResponse(url, entity, responseBody, error);
        }

    }

    private void handleRestClientException(URI url, AssistedHttpEntity entity, RestClientException e) {
        log.error("Failed to POST object at {}", url.toString());
        ResponseError error = new ResponseError(true, e.getMessage());
        this.validateAndAuditResponse(url, entity, error);
    }

    protected HttpHeaders getHttpHeaders(RequestMetaData requestMetaData) {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setBasicAuth(requestMetaData.getId(), requestMetaData.getId2());
        httpHeaders.set("header-1", requestMetaData.getSessionId());
        httpHeaders.set("header-2", requestMetaData.getEmployeeId());
        httpHeaders.set("header-3", requestMetaData.getRequestId());
        httpHeaders.set("header-4", this.systemId);
        return httpHeaders;
    }

    private <T> void logRequest(URI url, HttpMethod method, AssistedHttpEntity httpEntity, Class<T> responseType) {
        log.info("url: {}, method: {}, headers: {}, responseType: {} ", new Object[]{url, method, httpEntity.getHeaders(), responseType});
    }
}
